@page "/page3"
@implements IDisposable
@using Blazor3D.Core
@using Blazor3D.Enums
@using Blazor3D.Events
@using Blazor3D.Geometires
@using Blazor3D.Helpers
@using Blazor3D.Lights
@using Blazor3D.Materials
@using Blazor3D.Maths
@using Blazor3D.Objects
@using Blazor3D.Scenes
@using Blazor3D.Viewers
@using Blazor3D.Cameras
@using System.Globalization

<div class="row justify-content-center">
    <div class="col-9 v3d">
        <Viewer @ref=View3D1 ViewerSettings=@settings Scene=scene Camera=camera />
    </div>

    <div>
        <button @onclick="OnClearAllClick">ClearAll</button>
        <button @onclick="OnClearLast">RemoveLast</button>
    </div>
    <div>
        <label>X</label>
        <input type="number" value="@(xCoord.ToString())" @onchange="@(e => xCoord = float.Parse(e.Value.ToString(), NumberStyles.Any, CultureInfo.InvariantCulture))" />
        <label>Y</label>
        <input type="number" value="@(yCoord.ToString())" @onchange="@(e => yCoord = float.Parse(e.Value.ToString(), NumberStyles.Any, CultureInfo.InvariantCulture))" />
        <label>Z</label>
        <input type="number" value="@(zCoord.ToString())" @onchange="@(e => zCoord = float.Parse(e.Value.ToString(), NumberStyles.Any, CultureInfo.InvariantCulture))" />
        <button @onclick="OnCreateCubeButtonClick">Create cube with location</button>
        <button @onclick="OnUpdateCubeButtonClick">Update selected</button>
        <button @onclick="OnDeleteSelected">Delete selected </button>
    </div>
    <div>@selectionMsg</div>
</div>

@code {
    private Viewer View3D1 = null!;
    private Guid objGuid;
    private Guid lastSelectedGuid;
    private ViewerSettings settings = new ViewerSettings()
        {
            ContainerId = "rsid",
            CanSelect = true,
            CanSelectHelpers = false
        };

    private Scene scene = new Scene();
    private Camera camera = new PerspectiveCamera
        {
            Position = new Vector3(3, 3, 3),
            LookAt = new Vector3(0, 0.5f, 0)
        };

    private float xCoord { get; set; }
    private float yCoord { get; set; }
    private float zCoord { get; set; }

    private string selectionMsg = string.Empty;

    private Guid lastCubeGuid = Guid.NewGuid();

    protected override Task OnInitializedAsync()
    {
        AddLights();
        return base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            View3D1.ObjectSelected += OnObjectSelected;
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private void AddLights()
    {
        scene.Add(new AmbientLight());
        var plight = new PointLight()
            {
                //Color = "red",
                Decay = 2,
                Position = new Vector3(1, 5, 0)
            };
        scene.Add(plight);
        scene.Add(new PointLightHelper(plight, 0.5));
    }

    private void OnObjectSelected(Object3DArgs e)
    {
        lastSelectedGuid = e.UUID;
    }

    private async Task OnCreateCubeButtonClick()
    {
        var mesh = new Mesh
            {
                Geometry = new BoxGeometry(),
                Position = new Vector3(xCoord, yCoord, zCoord)
            };

        scene.Add(mesh);
        await View3D1.UpdateScene();
        lastCubeGuid = mesh.Uuid;
        this.selectionMsg = $"created new cube with id = {lastCubeGuid}, type = {mesh.Type} and name = {mesh.Name}.";
        StateHasChanged();
    }

    private async Task OnUpdateCubeButtonClick()
    {
        var selected = scene.Children.Find(x => x.Uuid == lastSelectedGuid);
        if (selected == null)
        {
            return;
        }

        if (selected is Mesh)
        {
            var mesh = selected as Mesh;
            mesh.Position = new Vector3(xCoord, yCoord, zCoord);
        }

        await View3D1.UpdateScene();
        this.selectionMsg = $"updated cube with id = {selected.Uuid}";
        StateHasChanged();
    }

    private async Task OnClearAllClick()
    {
        await View3D1.ClearSceneAsync();
        AddLights();
        await View3D1.UpdateScene();
    }

    private async Task OnClearLast()
    {
        if (scene.Children.Count == 0)
        {
            return;
        }
        var last = scene.Children.Last();
        await View3D1.RemoveByUuidAsync(last.Uuid);
    }

    private async Task OnDeleteSelected()
    {
        var selected = scene.Children.Find(x => x.Uuid == lastSelectedGuid);
        if (selected == null)
        {
            return;
        }

        await View3D1.RemoveByUuidAsync(selected.Uuid);
    }

    public void Dispose()
    {
        View3D1.ObjectSelected -= OnObjectSelected;
    }
}

