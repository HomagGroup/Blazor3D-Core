@page "/page4"
@implements IDisposable

<div class="row justify-content-center">
    <div class="col-9 v3d">
        <Viewer @ref="View3D1" ViewerSettings=@settings Scene=scene Camera=camera/>
    </div>
    <div>@selectionMsg</div>
</div>

@code {
    private Viewer View3D1 = null!;
    private Guid objGuid;

    private ViewerSettings settings = new ViewerSettings()
    {
        ContainerId = "rsid",
        CanSelect = true,
        CanSelectHelpers = false,
    };

    private Scene scene = new Scene();

    private Camera camera = new PerspectiveCamera
    {
        Position = new Vector3(3, 3, 3),
        LookAt = new Vector3(0, 0.5f, 0)
    };

    private string selectionMsg = string.Empty;

    protected override Task OnInitializedAsync()
    {
        AddLights();
        FillScene();
        return base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            View3D1.ObjectSelected += OnObjectSelected;
            View3D1.JsModuleLoaded += OnModuleLoaded;
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnModuleLoaded()
    {
        //await View3D1.Import3DModelAsync(
        //   Import3DFormats.Fbx,
        //   "https://threejs.org/examples/models/fbx/Samba%20Dancing.fbx",
        //   null,
        //   loadedObjectGuid);
        // await View3D1.SetCameraPositionAsync(new Vector3(0, 100, 250), new Vector3(0, 50, 0));
    }

    private void AddLights()
    {
        scene.Add(new AmbientLight());
        var plight = new PointLight()
        {
            //Color = "red",
            Decay = 2,
            Position = new Vector3(1, 5, 0)
        };
        scene.Add(plight);
        scene.Add(new PointLightHelper(plight, 0.5));
    }

    private void FillScene()
    {
        //scene.Add(new Mesh());

        var shape = new Shape();

        shape.MoveTo(-1, -1);
        shape.LineTo(-3, -1);
        shape.LineTo(-4, -3);
        shape.LineTo(-2, -3);
        shape.LineTo(-1, -5);

        var group = new Group();
        group.Add(new Mesh
        {
            Geometry = new ShapeGeometry(shape),
        });

        var options = new ExtrudeGeometryOptions
        {
            Depth = 0.5,
            BevelEnabled = false
        };

        group.Add(new Mesh
        {
            Geometry = new ExtrudeGeometry(shape, options),
            Position = new Vector3() { X = 3 },
            Material = new MeshStandardMaterial { Color = "green", Transparent = true, Opacity = 0.7 }
        });

        scene.Add(group);

        group = new Group();
        group.Add(new Mesh
        {
            Geometry = new ShapeGeometry(shape),
            Material = new MeshStandardMaterial { Color = "blue", Transparent = true, Opacity = 0.7 }
        });
        group.Position.Z = -5;
        scene.Add(group);
    }

    private void OnObjectSelected(Object3DArgs e)
    {
        var result = Viewer.GetObjectByUuid(e.UUID, scene.Children);
        if (result != null)
        {
            this.selectionMsg = $"selected object with id = {result.Uuid}, type = {result.Type} and name = {result.Name}.";
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        View3D1.ObjectSelected -= OnObjectSelected;
        View3D1.JsModuleLoaded -= OnModuleLoaded;
    }

}