@page "/"
@implements IDisposable

<div class="row justify-content-center">
    <div class="col-9 v3d">
        <Viewer @ref="View3D1" ViewerSettings=@settings Scene=scene Camera=camera/>
        @*<Viewer @ref="View3D1" ViewerSettings=@settings Scene=scene />*@
    </div>
    <div>
        <button @onclick="OnLoadObjButtonClick">Load OBJ</button>
        <button @onclick="OnClearAllClick">ClearAll</button>
        <button @onclick="OnClearLast">RemoveLast</button>
        <button @onclick="OnToggleCameraClick">ToggleCamera</button>
    </div>
    <div>
        <input type="text" @bind="selectObjectGuid"></input> <button @onclick="OnSelectObjectByUUIDClick">Select object</button>
    </div>
    <div>@selectionMsg</div>
</div>

@code {
    private bool toggler = false;
    private Viewer View3D1 = null!;
    private Guid objGuid;

    private ViewerSettings settings = new ViewerSettings()
    {
        ContainerId = "rsid",
        CanSelect = true,
        CanSelectHelpers = false,
        WebGLRendererSettings = new WebGLRendererSettings
        {
            Antialias = true
        }
    };

    private Scene scene = new Scene();
    //private Camera camera = new PerspectiveCamera
    //    {
    //        Position = new Vector3(3, 3, 3),
    //        LookAt = new Vector3(0, 0.5f, 0)
    //    };


    private string selectionMsg = string.Empty;

    private Guid loadedObjectGuid = Guid.NewGuid();
    private Guid? selectObjectGuid = null;

    private Camera camera = new OrthographicCamera()
    {
        Left = -5,
        Right = 5,
        Top = 5,
        Bottom = -5,
        Position = new Vector3(1, 1, 1),
        AnimateRotationSettings = new AnimateRotationSettings(true, 0.1, 0, 0.1, radius: 3)
        {
            StopAnimationOnOrbitControlMove = true
        },

        //Zoom = 0.5
    };

    protected override Task OnInitializedAsync()
    {
        AddLights();
        FillScene();
        return base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            View3D1.ObjectSelected += OnObjectSelected;
            View3D1.ObjectLoaded += OnObjectLoaded;
            View3D1.JsModuleLoaded += OnModuleLoaded;
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnModuleLoaded()
    {
        var settings = new ImportSettings
        {
            Format = Import3DFormats.Stl,
            FileURL = "https://threejs.org/examples/models/stl/ascii/slotted_disk.stl",
            Material = new MeshStandardMaterial
            {
                Color = "lightgrey",
                Roughness = 0.5f,
                Metalness = 0.5f
            }
        };
        loadedObjectGuid = await View3D1.Import3DModelAsync(settings);
        await View3D1.SetCameraPositionAsync(new Vector3(0, 3, 3), new Vector3(0, 1, 0));
    }

    private void AddLights()
    {
        scene.Add(new AmbientLight());
        var plight = new PointLight()
        {
            //Color = "red",
            Decay = 2,
            Position = new Vector3(1, 5, 0)
        };
        scene.Add(plight);
        scene.Add(new PointLightHelper(plight, 0.5));
    }

    private void FillScene()
    {
        //scene.Add(new Mesh());
        scene.Add(new Mesh
        {
            Geometry = new BoxGeometry(width: 2, height: 0.5f),
            Position = new Vector3(-1, 1, -1),
            Rotation = new Euler
            {
                X = Math.PI / 4
            },
            EdgesMaterial = new LineBasicMaterial
            {
                Color = "black"
            }
        });

        scene.Add(new Mesh
        {
            Geometry = new CircleGeometry(radius: 1.5f, segments: 12),
            Position = new Vector3(1, 1, -1),
            Scale = new Vector3(0.5f, 1f, 1f)
        });

        var capsule = new Mesh
        {
            Geometry = new CapsuleGeometry(radius: 1, length: 2),
            Position = new Vector3(-3, 0, -3),
            Material = new MeshStandardMaterial()
            {
                Color = "blue"
            },
            EdgesMaterial = new LineBasicMaterial
            {
                Color = "black"
            }
        };
        scene.Add(capsule);

        scene.Add(new Mesh
        {
            Geometry = new ConeGeometry(radius: 1.3f, height: 2, radialSegments: 16),
            Position = new Vector3(3, 0, -3),
            Material = new MeshStandardMaterial()
            {
                Color = "green",
                FlatShading = true,
                Metalness = 0.5f,
                Roughness = 0.5f
            }
        });

        scene.Add(new Mesh
        {
            Geometry = new CylinderGeometry(radiusTop: 0.5f, height: 2, radialSegments: 16),
            Position = new Vector3(0, 0, -3),
            Material = new MeshStandardMaterial()
            {
                Color = "red",
                Wireframe = true,
            }
        });
        scene.Add(new Mesh
        {
            Geometry = new DodecahedronGeometry(radius: 1.5f),
            Position = new Vector3(-5, 0, -5),
            Material = new MeshStandardMaterial()
            {
                Color = "darkviolet"
            }
        });
        scene.Add(new Mesh
        {
            Geometry = new IcosahedronGeometry(radius: 1.5f),
            Position = new Vector3(5, 0, -5),
            Material = new MeshStandardMaterial()
            {
                Color = "violet"
            }
        });
        scene.Add(new Mesh
        {
            Geometry = new OctahedronGeometry(radius: 1.5f),
            Position = new Vector3(0, 0, -5),
            Material = new MeshStandardMaterial()
            {
                Color = "pink"
            }
        });

        scene.Add(new Mesh
        {
            Geometry = new PlaneGeometry(width: 0.5f, height: 2),
            Position = new Vector3(-3, 1, -1),
        });

        scene.Add(new Mesh
        {
            Geometry = new RingGeometry(innerRadius: 0.6f, outerRadius: 0.7f),
            Position = new Vector3(3, 1, -1),
        });
        scene.Add(new Mesh
        {
            Geometry = new SphereGeometry(radius: 1.5f),
            Material = new MeshStandardMaterial()
            {
                Color = "darkgreen"
            },
            Position = new Vector3(0, 0, -8),
        });
        scene.Add(new Mesh
        {
            Geometry = new TetrahedronGeometry(radius: 1.5f),
            Position = new Vector3(-3, 0, -8),
            Material = new MeshStandardMaterial()
            {
                Color = "lightblue"
            }
        });

        scene.Add(new Mesh
        {
            Geometry = new TorusGeometry(tube: 0.8f, radialSegments: 12, tubularSegments: 12),
            Position = new Vector3(3, 0, -8),
            Material = new MeshStandardMaterial()
            {
                Color = "lightgreen"
            }
        });

        scene.Add(new Mesh
        {
            Geometry = new TorusKnotGeometry(tube: 0.1f),
            Position = new Vector3(7, 0, -8),
            Material = new MeshStandardMaterial()
            {
                Color = "magenta"
            }
        });

        scene.Add(new ArrowHelper(new Vector3(1, 1, 1), new Vector3(1, 1, 1), 3, "red", 1, 0.2));

        scene.Add(new AxesHelper(5));

        scene.Add(new BoxHelper(capsule, "black"));

        scene.Add(new GridHelper(2, 6, "red", "orange")
        {
            Position = new Vector3(-2, 0, 0)
        });

        scene.Add(new PolarGridHelper(radius: 2, radials: 8, circles: 6, divisions: 32, "red", "orange")
        {
            Position = new Vector3(2, 0, 0)
        });

        var plane = new Plane(new Vector3(-1, 1, 1), 1);
        scene.Add(new PlaneHelper(plane, 1, "green"));
    }

    private void OnObjectSelected(Object3DArgs e)
    {
        var result = Viewer.GetObjectByUuid(e.UUID, scene.Children);
        if (result != null)
        {
            this.selectionMsg = $"selected object with id = {result.Uuid}, type = {result.Type} and name = {result.Name}.";
            StateHasChanged();
        }
    }

    private Task OnObjectLoaded(Object3DArgs e)
    {
        var result = Viewer.GetObjectByUuid(e.UUID, scene.Children);
        if (result != null)
        {
            this.selectionMsg = $"loaded object with id = {result.Uuid}, type = {result.Type} and name = {result.Name}. Initial guid was {loadedObjectGuid}";
            StateHasChanged();
        }

        return Task.CompletedTask;
    }

    private async Task OnLoadObjButtonClick()
    {
        loadedObjectGuid = Guid.NewGuid(); // alway do this.

        // if you need to control the loaded object uuid, generate it here.
        loadedObjectGuid = Guid.NewGuid();
        var settings = new ImportSettings
        {
            Format = Import3DFormats.Obj, //choose appropriate format
            FileURL = "https://threejs.org/examples/models/obj/male02/male02.obj", // link to your model file
            TextureURL = "https://threejs.org/examples/textures/uv_grid_opengl.jpg", // link to the texture or skip this,
            Uuid = loadedObjectGuid //// skip this, or set null if you don't care the uuid of loaded mesh or group
        };
        await View3D1.Import3DModelAsync(settings);

        // set camera position to view your loaded model
        await View3D1.SetCameraPositionAsync(
            new Vector3(0, 100, 250), // camera position
            new Vector3(0, 50, 0)); // optional camera target
    }

    private async Task OnClearAllClick()
    {
        await View3D1.ClearSceneAsync();
    }


    private async Task OnClearLast()
    {
        if (scene.Children.Count > 0)
        {
            var last = scene.Children.Last();
            await View3D1.RemoveByUuidAsync(last.Uuid);
        }
    }

    public void Dispose()
    {
        View3D1.ObjectSelected -= OnObjectSelected;
        View3D1.ObjectLoaded -= OnObjectLoaded;
        View3D1.JsModuleLoaded -= OnModuleLoaded;
    }

    private async Task OnToggleCameraClick()
    {
        if (toggler == false)
        {
            await View3D1.UpdateCamera(new OrthographicCamera()
            {
                Left = -5,
                Right = 5,
                Top = 5,
                Bottom = -5,
                Position = new Vector3(1, 1, 1),
                AnimateRotationSettings = new AnimateRotationSettings(true, 0.1, 0, 0.1, radius: 3),
            });
        }
        else
        {
            await View3D1.UpdateCamera(new PerspectiveCamera
            {
                Position = new Vector3(3, 3, 3),
                LookAt = new Vector3(0, 0.5f, 0)
            });
        }

        toggler = !toggler;
    }

    private async Task OnSelectObjectByUUIDClick()
    {
        if (selectObjectGuid.HasValue)
        {
            await View3D1.SelectByUuidAsync(selectObjectGuid.Value);
        }
    }

}