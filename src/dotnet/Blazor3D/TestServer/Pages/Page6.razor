@page "/page6"
@implements IDisposable
@using HomagGroup.Blazor3D.Events
@using HomagGroup.Blazor3D.Maths
@using HomagGroup.Blazor3D.Objects
@using HomagGroup.Blazor3D.Scenes
@using HomagGroup.Blazor3D.Viewers
@using HomagGroup.Blazor3D.Cameras
@using HomagGroup.Blazor3D.Geometires
@using HomagGroup.Blazor3D.Geometires.Curves
@using HomagGroup.Blazor3D.Materials

<div class="row justify-content-center">
    <div style="background: black" class="col-9 v3d">
        <Viewer @ref="View3D1" ViewerSettings=@settings Scene=scene Camera=camera />
    </div>
    <div>@selectionMsg</div>
</div>

@code {
    private Viewer View3D1 = null!;
    private Guid objGuid;
    private ViewerSettings settings = new ViewerSettings()
        {
            ContainerId = "rsid",
            CanSelect = true,
            CanSelectHelpers = false,
            WebGLRendererSettings = new WebGLRendererSettings()
            {
                PremultipliedAlpha = false,
                Alpha = true,
                Antialias = true,
            }
        };

    private Scene scene = new Scene()
    {
        BackGroundColor = string.Empty,
    };
    
    private Camera camera = new PerspectiveCamera
        {
            Position = new Vector3(0, 0, -20),
        };

    private string selectionMsg = string.Empty;

    protected override Task OnInitializedAsync()
    {
        FillScene();
        return base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            View3D1.ObjectSelected += OnObjectSelected;
            View3D1.JsModuleLoaded += OnModuleLoaded;
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnModuleLoaded()
    {
    }

    private void FillScene()
    {
        var splineMesh = new Line()
        {
            Geometry = new SplineCurveGeometry
            {
                Divisions = 150,
                Points = new List<Vector2>
                {
                    new(-5, 5),
                    new(-10, 0),
                    new(0, 0),
                    new(5, -5),
                    new(10, 0),
                }
            },
            Material = new LineBasicMaterial {Color = "red"},
        };
        
        var mesh = new Mesh
        {
            Geometry = new CircleGeometry(radius: 1.5f, segments: 12),
            Position = new Vector3(1, 1, -1),
            Scale = new Vector3(0.5f, 1f, 1f)
        };
        scene.Add(splineMesh);
    }

    private void OnObjectSelected(Object3DArgs e)
    {
        var result = Viewer.GetObjectByUuid(e.UUID, scene.Children);
        if (result != null)
        {
            this.selectionMsg = $"selected object with id = {result.Uuid}, type = {result.Type} and name = {result.Name}.";
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        View3D1.ObjectSelected -= OnObjectSelected;
        View3D1.JsModuleLoaded -= OnModuleLoaded;
    }
}