@page "/page5"
@implements IDisposable
@using HomagGroup.Blazor3D.Core
@using HomagGroup.Blazor3D.Enums
@using HomagGroup.Blazor3D.Events
@using HomagGroup.Blazor3D.Extras.Core;
@using HomagGroup.Blazor3D.Geometires
@using HomagGroup.Blazor3D.Geometires.Lines;
@using HomagGroup.Blazor3D.Geometires.Text;
@using HomagGroup.Blazor3D.Helpers
@using HomagGroup.Blazor3D.Lights
@using HomagGroup.Blazor3D.Materials
@using HomagGroup.Blazor3D.Maths
@using HomagGroup.Blazor3D.Objects
@using HomagGroup.Blazor3D.Scenes
@using HomagGroup.Blazor3D.Viewers
@using HomagGroup.Blazor3D.Cameras

<div class="row justify-content-center">
    <div class="col-9 v3d">
        <Viewer @ref="View3D1" ViewerSettings=@settings Scene=scene Camera=camera />
    </div>
    <div>@selectionMsg</div>
</div>

@code {
    private Viewer View3D1 = null!;
    private Guid objGuid;
    private ViewerSettings settings = new ViewerSettings()
        {
            ContainerId = "rsid",
            CanSelect = true,
            CanSelectHelpers = false,
        };

    private Scene scene = new Scene();
    private Camera camera = new PerspectiveCamera
        {
            Position = new Vector3(3, 3, 3),
            LookAt = new Vector3(0, 0.5f, 0)
        };

    private string selectionMsg = string.Empty;

    protected override Task OnInitializedAsync()
    {
        AddLights();
        FillScene();
        return base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            View3D1.ObjectSelected += OnObjectSelected;
            View3D1.JsModuleLoaded += OnModuleLoaded;
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnModuleLoaded()
    {
        //await View3D1.Import3DModelAsync(
        //   Import3DFormats.Fbx,
        //   "https://threejs.org/examples/models/fbx/Samba%20Dancing.fbx",
        //   null,
        //   loadedObjectGuid);
        // await View3D1.SetCameraPositionAsync(new Vector3(0, 100, 250), new Vector3(0, 50, 0));
    }

    private void AddLights()
    {
        scene.Add(new AmbientLight());
        var plight = new PointLight()
            {
                //Color = "red",
                Decay = 2,
                Position = new Vector3(1, 5, 0)
            };
        scene.Add(plight);
        scene.Add(new PointLightHelper(plight, 0.5));
    }
    private void FillScene()
    {
        var text = new Text
            {
                Material = new MeshStandardMaterial
                {
                    Color = "red",
                },
                Geometry = new TextExtrudeGeometry
                {
                    FontURL = "fonts/helvetiker_regular.typeface.json",
                    Size = 1,
                    Height = 0.1,
                }
            };

        scene.Add(text);

        text = new Text
            {
                Material = new MeshStandardMaterial
                {
                    Color = "blue",
                },
                Geometry = new TextExtrudeGeometry
                {
                    FontURL = "fonts/helvetiker_regular.typeface.json",
                    Size = 1,
                    Height = 0.5,
                    BevelEnabled = true,
                    BevelSegments = 2,
                    BevelSize = 0.05,
                    BevelThickness = 0.1
                },
                Position = new Vector3(0, 0, -1)
            };
        scene.Add(text);

        text = new Text
            {
                Material = new MeshStandardMaterial
                {
                    Color = "violet",
                },
                Geometry = new TextShapeGeometry
                {
                    FontURL = "fonts/helvetiker_regular.typeface.json",
                    Size = 1,
                },
                Position = new Vector3(0, 0, 1)
            };
        scene.Add(text);

        text = new Text
            {
                Material = new MeshStandardMaterial
                {
                    Color = "violet",
                },
                Geometry = new TextStrokeGeometry
                {
                    FontURL = "fonts/helvetiker_regular.typeface.json",
                    Size = 1,
                    StrokeWidth = 0.05
                },
                Position = new Vector3(0, 0, 2)
            };
        scene.Add(text);

    }

    private void OnObjectSelected(Object3DArgs e)
    {
        var result = Viewer.GetObjectByUuid(e.UUID, scene.Children);
        if (result != null)
        {
            this.selectionMsg = $"selected object with id = {result.Uuid}, type = {result.Type} and name = {result.Name}.";
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        View3D1.ObjectSelected -= OnObjectSelected;
        View3D1.JsModuleLoaded -= OnModuleLoaded;
    }
}

